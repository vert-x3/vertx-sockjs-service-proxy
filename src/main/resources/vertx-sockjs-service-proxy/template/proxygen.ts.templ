@comment{"Generate the module name of a type"}
@comment{"===================================="}
@code{
  def genModuleName(moduleType) {
    return moduleType.raw.moduleName + "-ts/" + CASE_CAMEL.to(CASE_SNAKE, moduleType.raw.simpleName);
  }
}

@comment{"Generate the TS type of a type"}
@comment{"===================================="}
@code{
  def genTSType(type) {
    if (type.kind == CLASS_STRING) {
      return 'string';
    } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE) {
      if (type.simpleName == 'boolean' || type.simpleName == 'Boolean') {
        return 'boolean';
      } else if (type.simpleName == 'char' || type.simpleName == 'Character') {
        return 'string';
      } else {
        return 'number';
      }
    } else if (type.kind == CLASS_JSON_OBJECT) {
      return 'Object';
    } else if (type.kind == CLASS_JSON_ARRAY) {
      return 'Array';
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return 'any';
    } else if (type.kind == CLASS_ENUM) {
      return 'string';
    } else if (type.kind == CLASS_API) {
      return type.raw.simpleName;
    } else if (type.kind.collection) {
      return 'Array<' + genTSType(type.args[0]) + '>';
    } else if (type.kind == CLASS_MAP) {
      return 'Object<string, ' + genTSType(type.args[1]) + '>';
    } else if (type.kind == CLASS_OBJECT) {
      return 'any';
    } else if (type.kind == CLASS_HANDLER) {
      if (type.args[0].args[0].kind==CLASS_API) {
        return '(err: any, result: ' + genTSType(type.args[0].args[0]) + ') => any';
      } else {
        return '(err: any, result: any) => any';
      }
    } else {
      return 'todo';
    }
  }
}

@comment{"Generate a TypeScript Method"}
@comment{"============================"}
@declare{'genMethod'}
	@code{methodList = methodsByName.get(methodName)}
	@if{methodFilter != null}
		@code{methodList = new java.util.ArrayList()}
		@foreach{method : methodsByName.get(methodName)}
			@if{methodFilter(method)}
				@code{methodList.add(method)}
			@end{}
		@end{}
	@end{}
	@if{methodList.size() > 0}
	@code{method = methodList.get(methodList.size() - 1);}
	@if{static == method.staticMethod}
  @if{static}static @end{}@{methodName}(@foreach{param: method.params}@{param.name}: @{genTSType(param.type)}@end{", "}) : @if{method.fluent}@{ifaceSimpleName}@else{}void@end{}\n\n
	@end{}
	@end{}
@end{}

@declare{'genMethodAdapter'}
    if (closed) {\n
      throw new Error('Proxy is closed');\n
    }\n
	@includeNamed{'genMethodCall'};\n
@if{method.proxyClose}
      closed = true;\n
@end{}
@if{method.fluent}
      return this;\n
@end{}
@end{}

@comment{"This is where the generation starts"}
@comment{"==================================="}

/*\n
 * Copyright 2018 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

@code{ifaceName = helper.decapitaliseFirstLetter(ifaceSimpleName)}

@comment{"Generate the requires"}

@foreach{referencedType : referencedTypes}
	@if{referencedType.proxyGen}
		@code{refedType=referencedType.simpleName;}
import { @{refedType} } from './@{genModuleName(referencedType)}-proxy';\n
	@end{}
@end{}
\n

export default class @{ifaceSimpleName} {\n\n

@comment{"The constructor"}

  constructor (eb: any, address: string);\n\n

@code{
  def methodFilter(method) {
    return !method.proxyIgnore;
  }
}

@comment{"Now iterate through each unique method"}

@foreach{methodName:methodsByName.keySet()}

@comment{"Call out to actually generate the method, we only consider non static methods here"}
@code{methods}
@includeNamed{'genMethod';static=false}
@end{}
}
